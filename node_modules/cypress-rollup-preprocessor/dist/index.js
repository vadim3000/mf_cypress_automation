'use strict';

var rollup = require('rollup');
var os = require('os');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function wrapRollupError(rollupError) {
    var _a, _b, _c;
    var message = [
        rollupError.message,
        rollupError.frame,
        [(_a = rollupError.loc) === null || _a === void 0 ? void 0 : _a.file, (_b = rollupError.loc) === null || _b === void 0 ? void 0 : _b.line, (_c = rollupError.loc) === null || _c === void 0 ? void 0 : _c.column]
            .filter(Boolean)
            .join(':'),
    ]
        .filter(Boolean)
        .join(os.EOL);
    return new Error(message);
}

var lastWatchersOutputEmmitedEvents = {};
var watchers = {};
function watch(inputOptions, outputOptions, file) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var watcherKey, watcher;
        return __generator(this, function (_b) {
            watcherKey = getWatcherKey(inputOptions);
            watcher = watchers[watcherKey] = (_a = watchers[watcherKey]) !== null && _a !== void 0 ? _a : rollup.watch(__assign(__assign({}, inputOptions), { output: outputOptions }));
            file.on('close', createFileClosedListener(watcherKey));
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var firstBuild = true;
                    watcher.on('event', function (e) {
                        if (['BUNDLE_END', 'ERROR'].includes(e.code)) {
                            setCachedWatcherOutput(inputOptions, e);
                        }
                        if (['END'].includes(e.code)) {
                            if (firstBuild) {
                                firstBuild = false;
                                getWatcherCachedOutput(inputOptions)
                                    .then(resolve)
                                    .catch(reject);
                            }
                            else {
                                file.emit('rerun');
                            }
                        }
                    });
                })];
        });
    });
}
function setCachedWatcherOutput(inputOptions, e) {
    lastWatchersOutputEmmitedEvents[getWatcherKey(inputOptions)] = e;
}
function getWatcherKey(inputOptions) {
    return inputOptions.input.toString();
}
function getWatcherCachedOutput(inputOptions) {
    var lastEvent = lastWatchersOutputEmmitedEvents[getWatcherKey(inputOptions)];
    if ((lastEvent === null || lastEvent === void 0 ? void 0 : lastEvent.code) === 'BUNDLE_END') {
        return Promise.resolve(lastEvent.output[0]);
    }
    if ((lastEvent === null || lastEvent === void 0 ? void 0 : lastEvent.code) === 'ERROR') {
        return Promise.reject(wrapRollupError(lastEvent.error));
    }
    return null;
}
function createFileClosedListener(watcherKey) {
    return function () {
        var _a;
        (_a = watchers[watcherKey]) === null || _a === void 0 ? void 0 : _a.close();
        delete watchers[watcherKey];
        delete lastWatchersOutputEmmitedEvents[watcherKey];
    };
}

function build(inputOptions, outputOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var builder, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, rollup.rollup(inputOptions)];
                case 1:
                    builder = _a.sent();
                    return [4 /*yield*/, builder.write(outputOptions)];
                case 2:
                    _a.sent();
                    return [2 /*return*/, outputOptions.file.toString()];
                case 3:
                    e_1 = _a.sent();
                    return [2 /*return*/, Promise.reject(wrapRollupError(e_1))];
                case 4: return [2 /*return*/];
            }
        });
    });
}

function preprocessor(options) {
    var _this = this;
    if (options === void 0) { options = {}; }
    return function (file) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, processFile(options, file)];
    }); }); };
}
function processFile(options, file) {
    return __awaiter(this, void 0, void 0, function () {
        var inputOptions, watcherCachedOutput, outputOptions;
        return __generator(this, function (_a) {
            inputOptions = Object.assign({}, options.inputOptions, {
                input: file.filePath,
            });
            watcherCachedOutput = getWatcherCachedOutput(inputOptions);
            if (watcherCachedOutput) {
                return [2 /*return*/, watcherCachedOutput];
            }
            outputOptions = Object.assign({}, options.outputOptions, {
                file: file.outputPath,
            });
            if (file.shouldWatch) {
                return [2 /*return*/, watch(inputOptions, outputOptions, file)];
            }
            return [2 /*return*/, build(inputOptions, outputOptions)];
        });
    });
}

module.exports = preprocessor;
//# sourceMappingURL=index.js.map
